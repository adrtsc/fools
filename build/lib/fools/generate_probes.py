from pathlib import Path
import pandas as pd
import argparse

PRIMER_SEQUENCES = {1: {"fwd": "GTTGGTCGGCACTTGGGTGC",
                        "rvs": "CCACCGGATGAACCGGCTTT"},
                    2: {"fwd": "CGATGCGCCAATTCCGGTTC",
                        "rvs": "CAACCCGCGAGCGATGATCA"}
                    }

BARCODES = {"green": "CGGTGGCGTCATATTCCATGGACAC",
            "red": "GTCGGGGAGTTACGCGATACTTTCT",
            "far-red": "CTAGTACGAAGACCGTGTGCGGCTG"}

IDENTIFIERS = {"paintshop": {"name": "refseq",
                             "filter_by": "on_target"},
               "oligominer": {"name": "name",
                              "filter_by": "Tm"}
               }

SPACER = "tt"


def filter_probes(probes, n_probes, probe_design):

    name = IDENTIFIERS[probe_design]['name']
    filter_by = IDENTIFIERS[probe_design]['filter_by']

    probes_filtered = probes.groupby([name]).apply(
        lambda x: x.nlargest(n_probes, [filter_by])
        if probe_design == "paintshop"
        else x.nsmallest(n_probes, [filter_by])).reset_index(drop=True)

    probe_count = probes_filtered.groupby(name).size()
    for name, count in probe_count.iteritems():
        if count < n_probes:
            print(f"Only {count} probes detected for gene {name}")

    return probes_filtered


def get_barcoded_sequences(probe):
    # define the barcode based on color in the metadata
    fwd_primer = PRIMER_SEQUENCES[probe["primer_pair"]]['fwd']
    rvs_primer = PRIMER_SEQUENCES[probe["primer_pair"]]['rvs']
    barcode = BARCODES[probe["color"]]

    # put together final barcodes
    left_barcode = fwd_primer + (barcode + SPACER) * 2
    right_barcode = (SPACER + barcode) * 2 + rvs_primer

    # add barcode to primary probe sequence
    new_sequence = left_barcode + probe['sequence'] + right_barcode

    return new_sequence


def generate_order_file(probes, probe_path):

    order_df = probes[['pool_name', 'final_sequence']]
    order_df.columns = ['Pool name', 'Sequence']
    order_df.set_index('Pool name', inplace=True)

    order_df.to_excel(
        probe_path.parent.joinpath(f'order_form_{probe_path.stem}.xlsx'))


def main():
    # Parse Arguments
    parser = argparse.ArgumentParser(
        description="Script to get ratioFISH probes from paintshop output file")
    parser.add_argument('--probe_path', type=str,
                        help='Full path to the output .txt file of paintshop '
                             'or .csv file generated by oligominer')
    parser.add_argument('--metadata_path', type=str,
                        help='Full path to the metadata .csv file.'
                             ' Has to contain the following columns:'
                             '"gene_name", "primer_pair", "color" and "pool_name"')
    parser.add_argument('--probe_design', type=str, default="paintshop",
                        help='Choose "paintshop" or "oligominer" ("paintshop" by default)')
    parser.add_argument('-n', '--n_probes', type=int, default=12,
                        help='number of probes to filter per target gene (12 by default)')

    args = parser.parse_args()

    probes_md = pd.read_csv(args.metadata_path)
    probes = pd.read_csv(args.probe_path, sep=None)

    # merge probes in case it's an oligominer file (can have multiple regions
    # per gene)
    if args.probe_design == 'oligominer':
        probes_md = probes_md.groupby('gene_name', as_index=False).aggregate('first')

    probes = filter_probes(probes, args.n_probes, args.probe_design)

    probes = pd.merge(probes, probes_md[['gene_name', "color",
                                         "primer_pair", "pool_name"]],
                      left_on=IDENTIFIERS[args.probe_design]['name'],
                      right_on="gene_name")

    probes['final_sequence'] = probes.apply(get_barcoded_sequences, axis=1)
    probes.to_csv(Path(args.probe_path).with_suffix(".csv"))

    # save each pool as a separate order file
    generate_order_file(probes, Path(args.probe_path))


if __name__ == "__main__":
    main()
